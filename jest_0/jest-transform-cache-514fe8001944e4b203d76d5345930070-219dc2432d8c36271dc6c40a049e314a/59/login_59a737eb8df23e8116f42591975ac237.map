{"version":3,"sources":["login.vue"],"names":[],"mappings":";;;;;;;AAyBA;;;AAGA;AACA;AACA;AACA;AACA;AAHA;AAKA;;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;;AAEA;AACA;AACA;AACA;AAtBA;;AA5BA;AA1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","sourcesContent":["<template>\n   <article>\n       <div class=\"container\"> \n            <div class=\"login\">\n                <form class=\"sign-in\">\n                    <h2>Sign In</h2>\n                    <div>Use your account</div>\n                    \n                    <input type=\"email\" placeholder=\"Email\" v-model=\"email\" v-model.trim=\"$v.email.$model\" name=\"email\" id=\"email\" class=\"form-control\" :class=\"{ 'input-error': $v.email.$error }\"/>\n                    <div class=\"error\" v-if=\"!$v.email.required\">Email is required</div>\n                    <div class=\"error\" v-if=\"!$v.email.email\">Enter must be a valid</div>\n                   \n                    <input type=\"password\" placeholder=\"Password\" v-model=\"password\" v-model.trim=\"$v.password.$model\" name=\"password\" id=\"password\" class=\"form-control\" :class=\"{ 'input-error': $v.password.$error }\" />\n                    <div class=\"error\" v-if=\"!$v.password.required\">Password is required</div>\n                    <div class=\"error\" v-if=\"!$v.password.minLength\">Name must have at least {{$v.password.$params.minLength.min}} letters.</div>\n                    \n                    <a href=\"#\">Forgot Password?</a>\n                    <button type=\"button\" @click=\"loginAction\">Sign In</button>\n                </form>\n            </div> \n       </div>\n   </article>\n</template>\n<script>\n//import axios from 'axios';\nimport { required, email, minLength, between } from 'vuelidate/lib/validators'\n\nexport default {\n    data () {\n\t\treturn {\n            email:'',\n            password:'',\n            submitStatus: null\n\t\t}\n    },\n    validations: {\n        email: {\n            required,\n            email       \n        },\n        password: {\n            required,\n            minLength: minLength(4)\n        }\n    },\n    created() {\n        this.$store.subscribe((mutation, state) => {\n            console.log(\"mutation type:-\"+mutation.type);\n        })\n    },\n    mounted() {\n        //alert('home');\n\t\tjQuery('body').removeClass('is-menu-visible');\n\t\t//this.checklogin();\n\t},  \n\tmethods: {\n        loginAction(){\n            console.log('submit!')\n            this.$v.$touch()\n            //login action code here\n            if (this.$v.$invalid) {\n                this.submitStatus = 'ERROR'\n                console.log(this.submitStatus)\n            } else {\n                // do your submit logic here\n                this.submitStatus = 'OK'\n                this.$store.dispatch('getToken',{\n                    email: this.email,\n                    password: this.password\n                })\n                .then(response => {\n                    console.log('get success');\n                    console.log(response);\n                    \n                    this.$router.push('/')\n                })\n            }\n        },\n    }\n    \n}\n</script>\n\n<style lang=\"scss\" scoped>\n    .container{\n        position: relative;\n        widows: 768px;\n        height: 480px;\n        overflow: hidden;\n        border-radius: 10px;\n        box-shadow: 0 15px 30px rgba(0, 0, 0, .0),\n                    0 10px 10px rgba(0, 0, 0, .0);\n        background: linear-gradient(to bottom,#5f1d1d54, rgba(189, 131, 131, 0.5));\n    }\n    .error{\n        color: red;\n    }\n    .input-error{\n        border: 1px solid red;\n    }\n    h2{\n        margin: 0;\n    }\n    p{\n        margin: 20px 0 30px;\n    }\n\n    a{\n        color: #222;\n        text-decoration: none;\n        margin: 15px 0;\n        font-size: 1rem;\n    }\n\n    button{\n        border-radius: 20px;\n        border: 1px solid #0a0a0a;\n        background-color: #000000;\n        color: #fff!important;\n        font-size: 1rem;\n        font-weight: bold;\n        letter-spacing: 1px;\n        text-transform: uppercase;\n        transition: transform .1s ease-in;\n    }\n    a:active{\n        transform: scale(.9);\n    }\n    a:focus{\n        outline: none;\n    }\n\n    button.invert{\n        background-color: transparent;\n        border-color: #fff;\n    }\n\n    form{\n        \n        top: 0;\n        display: flex;\n        align-items: center;\n        justify-content: space-around;\n        flex-direction: column;\n        padding: 90px 60px;\n        width: calc(50% - 120px);\n        height: calc(100% - 180px);\n        background: linear-gradient(to bottom, #ed8686, #97979733);\n        transition: all .5s ease-in-out;\n    }\n    div{\n        font-size: 1rem;\n    }\n    input{\n        background-color: #eee;\n        border: none;\n        padding: 8px 15px;\n        margin: 6px 0;\n        width: calc(100% - 30px);\n        border-radius: 15px;\n        border-bottom: 1px solid #ddd;\n        box-shadow: 0 1px 2px rgba(0, 0, 0, .4),\n                    0 -1px, 1px #fff,\n                    0 1px 0 #fff;\n        overflow: hidden;\n    }\n    \n    .sign-in{\n        left: 0;\n        z-index: 1;\n        margin-left: auto;\n        margin-right: auto;\n    }\n</style>"]}